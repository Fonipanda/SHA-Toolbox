---

#---------------------------------------------
# Set last toolbox version if not define
#---------------------------------------------
#- name: set tmp_list_version
#  set_fact:
#    tmp_list_version: ""

#- name: get list toolbox from artifactory
#  uri:
#    url: http://af.staging.echonet:8090/artifactory/toolboxes/windows/
#    return_content: yes
#  register: webpage
#  delegate_to: localhost

#- name: get all toolbox version
#  ignore_errors: true
#  vars:
#    key: "{{ item | regex_replace('<a[^>]+href=\"(.*?)/\">.*','\\1')| replace('<pre>..','') }}"
#  set_fact:
#    tmp_list_version: "{{ tmp_list_version }},{% if key != '' %}'{{ key }}'{% endif %}"
#  when: 
#    - "'<a href' in item"
#    - toolboxes_version is not defined
#  loop: "{{ webpage.content.split('\n')  }}"

#- name: set List_version
#  set_fact:
#    List_version: "[ {{ tmp_list_version[2:] }} ]"
#  when:
#    - toolboxes_version is not defined 

#- name: get last toolbox version
#  set_fact:
#    toolboxes_version: "{{ (List_version|sort)[-1] }}"
#  when:
#    - toolboxes_version is not defined

#---------------
# tmp directory
#---------------
- name: Create tmp directory
  file:
    path: "{{ toolboxes_tmp_directory }}"
    state: directory
  delegate_to: localhost
  run_once: true
  ignore_errors: yes
#---------------
# Download toolboxes.zip
#---------------
- name: Download toolboxes.zip
  delegate_to: localhost
  run_once: true
  get_url:
    url: "https://myopstools.group.echonet/itnorms?packageName=toolboxes.zip"
    dest: "{{ toolboxes_tmp_zip }}"
    validate_certs: no
  ignore_errors: yes
  when:
    - toolboxes_powershell_version_ge_4 == true
    - toolboxes_task_continue == true
#---------------
# Download setup.ps1
#---------------
- name: Download setup.ps1
  delegate_to: localhost
  run_once: true
  get_url:
    url: "https://myopstools.group.echonet/itnorms?packageName=setup.ps1"
    dest: "{{ toolboxes_tmp_ps1 }}"
    validate_certs: no
  ignore_errors: yes
  when:
    - toolboxes_powershell_version_ge_4 == true
    - toolboxes_task_continue == true
#---------------
# copy toolboxes.zip
#---------------
- name: Copy Toolboxes.zip to c:\temp
  win_copy:
    src: "{{ toolboxes_tmp_zip }}"
    dest: "{{ toolboxes_zip }}"
  ignore_errors: yes
  when:
    - toolboxes_powershell_version_ge_4 == true
    - toolboxes_task_continue == true
  register: cp_toolboxes_zip
- set_fact:
    toolboxes_task_continue: "{% if cp_toolboxes_zip.failed == false %}true{% else %}false{% endif %}"
  when:
    - toolboxes_powershell_version_ge_4 == true
    - toolboxes_task_continue == true
#---------------
# copy setup.ps1
#---------------
- name: Copy setup.ps1 to c:\temp
  win_copy:
    src: "{{ toolboxes_tmp_ps1 }}"
    dest: "{{ toolboxes_ps1 }}"
  ignore_errors: yes
  when:
    - toolboxes_powershell_version_ge_4 == true
    - toolboxes_task_continue == true
  register: cp_toolboxes_ps1
- set_fact:
    toolboxes_task_continue: "{% if cp_toolboxes_ps1.failed == false %}true{% else %}false{% endif %}"
  when:
    - toolboxes_powershell_version_ge_4 == true
    - toolboxes_task_continue == true
#---------------
# check powershell_ise
#---------------
- name: Check processes powershell_ise running process
  win_shell: "if(@(get-process -name powershell_ise -ErrorAction SilentlyContinue).Count -ne 0){exit 1}else{exit 0}"
  args:
    executable: powershell
  changed_when: false
  ignore_errors: yes
  when:
    - toolboxes_powershell_version_ge_4 == true
    - toolboxes_task_continue == true
  register: powershell_ise
- set_fact:
    toolboxes_task_continue: "{% if powershell_ise.rc == 0 %}true{% else %}false{% endif %}"
  when:
    - toolboxes_powershell_version_ge_4 == true
    - toolboxes_task_continue == true
#---------------
# Install
#---------------
- name: Install toolbox
  win_shell: powershell -NoLogo -noprofile "{{ toolboxes_ps1 }} -install -json {{ toolboxes_json }}"
  args:
    executable: cmd
  changed_when: false
  ignore_errors: yes
  when:
    - toolboxes_powershell_version_ge_4 == true
    - toolboxes_task_continue == true
- name: Check Install toolbox
  win_shell: powershell -NoLogo -noprofile "Get-Content -Path {{ toolboxes_json }} -Force"
  args:
    executable: cmd
  changed_when: (install_toolbox.stdout | from_json).changed
  ignore_errors: yes
  when:
    - toolboxes_powershell_version_ge_4 == true
    - toolboxes_task_continue == true
  register: install_toolbox
- set_fact:
    toolboxes_task_continue: "{% if (install_toolbox.stdout | from_json).failed == false %}true{% else %}false{% endif %}"
  when:
    - toolboxes_powershell_version_ge_4 == true
    - toolboxes_task_continue == true
#---------------
# Result
#---------------
- name: set result output for toolboxes windows
  include_role:
    name: ips_toolbox_set_results
  vars:
    set_results_state:
      "{% if toolboxes_task_continue == true and toolboxes_powershell_version_ge_4 == true %}\

        installed\

       {% else %}\

        not installed\

       {% endif %}"
    set_results_item: "{{ inventory_hostname }}"
    set_results_value: "19.1.2.0"
    set_results_component: "{{ toolboxes_component }}"
    set_results_operation: "{{ toolboxes_operation }}"
    set_results_role_name: "{{ toolboxes_role_name }}"
    set_results_result_name: "{{ toolboxes_result_name }}"
    set_results_status:
      "{% if toolboxes_task_continue == true %}\

        OK\

       {% else %}\

        KO\

       {% endif %}"

