---

- name: get installation files presence 
  shell: '[ -n "$(egrep -v "^#|^$|^\*" /etc/oratab | cut -d: -f2 | sort -u )" ]'
  register: installTest
  changed_when: false
  failed_when: false

- name: check version in /etc/oratab
  shell: 'egrep -v "^#|^$|^\*" /etc/oratab | cut -d: -f2 | cut -d/ -f4 | sort -u'
  register: versionCheck
  changed_when: false
  failed_when: false
  when: installTest.rc == 0

- set_fact:
    tmp_json_versions: ""

- set_fact:
    tmp_json_versions: "{{ tmp_json_versions }}, \"{{ oracle_version }}\""
  loop: "{{ versionCheck.stdout_lines }}"
  loop_control:
    loop_var: oracle_version
  when: installTest.rc == 0

- name: Format to Json when oracle is installed
  set_fact:
    tmp_json: "{ \"installed\": \"yes\" ,\"version\": [ {{ tmp_json_versions[1:] }} ] }"
  when: installTest.rc == 0

- name: Format to Json when oracle is not installed
  set_fact:
    tmp_json: "{ \"installed\": \"no\" ,\"version\": \"\" }"
  when: installTest.rc != 0
    
- name: set result output for oracle check
  include_role:
    name: ips_toolbox_set_results
  vars:
    set_results_state: "info"
    set_results_item: ""
    set_results_value: "{{ tmp_json | to_json | from_json }}" 
    set_results_component: "{{ oracle_component }}"
    set_results_operation: "{{ oracle_operation }}"
    set_results_role_name: "{{ oracle_role_name }}"
    set_results_result_name: "{{ oracle_result_name }}"
    set_results_status: 
      "{% if installTest.rc == 0 %}\

         {% if versionCheck.rc == 0 %}\

           OK\

         {% else %}\

           KO\

         {% endif %}\

       {% else %}\

         OK\

       {% endif %}"

