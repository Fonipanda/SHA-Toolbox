---

- name: stop play when a mandatory variable is missing
  ansible.builtin.assert:
  that:
    - oracle_item != ""
  msg: "oracle_item variable is missing"

- name: Begin start blackout
  block:

  - name: check instance exists
    shell: cat /etc/oratab | grep ^{{ oracle_item }}
    register: checkPresence
    failed_when: false
    changed_when: false

  - name: start blackout {{ oracle_item }}
    oracle_oem:
      action: start
      instanceName: "{{ oracle_item }}"
    become: true
    become_user: oracle
    become_method: su
    register: startblackout
    when:
      - checkPresence.rc == 0
    changed_when: startblackout.changed == True  

  - name: working blackout
    ansible.builtin.set_fact:
      oracle_status: "OK"
      oracle_state: "{{ startblackout.state }}"
      oracle_value: "{% if startblackout.message is defined %}{{ startblackout.message }}{% endif %}"
    when:
      - checkPresence.rc == 0

  - name: "{{ oracle_item }} not found"
    ansible.builtin.set_fact:
      oracle_status: "KO"
      oracle_state: "not started"
      oracle_value: "instance {{ oracle_item }} not found"
    when:
      - checkPresence.rc != 0

  rescue:
    - name: ansible failure
      ansible.builtin.set_fact:
        oracle_status: "KO"
        oracle_value: "{% if startblackout.message is defined %}{{ startblackout.message }}{% else %}{{ startblackout.msg }}{% endif %}"
        oracle_state: "{{ startblackout.state }}"

  always:
    - name: End start blackout {{ oracle_item }}
      ansible.builtin.include_role:
        name: ips_toolbox_set_results
      vars:
        set_results_state: "{{ oracle_state }}"
        set_results_item: "{{ oracle_item }}"
        set_results_component: "{{ oracle_component }}"
        set_results_operation: "{{ oracle_operation }}"
        set_results_role_name: "{{ oracle_role_name }}"
        set_results_value: "{{ oracle_value }}"
        set_results_result_name: "{{ oracle_result_name }}"
        set_results_status: "{{ oracle_status }}"

