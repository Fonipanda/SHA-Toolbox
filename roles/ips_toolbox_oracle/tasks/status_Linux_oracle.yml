---

- name: stop play when a mandatory variable is missing
  ansible.builtin.assert:
  that:
    - oracle_item != ""
  msg: "oracle_item variable is missing"

- name: check presence all instance
  shell: 'if [ "{{ oracle_item }}" = "all" ];then egrep -v "^#|^$|^\*" /etc/oratab | cut -d: -f1;else egrep -v "^#|^$|^\*" /etc/oratab | cut -d: -f1 | grep -w ^{{ oracle_item }};fi'
  register: checkPresence
  failed_when: false
  changed_when: false

- name: get information
  script: Info_Oracle.ksh {{ oracle_item }}
  register: getinfo
  changed_when: False
  failed_when: False
  when:
    - checkPresence.rc == 0
    - checkPresence.stdout_lines != "" 

- name: reference initialization
  ansible.builtin.file:
    path: /var/tmp/ora_ref_status_stopped_{{ oracle_instance }}
    state: absent
  loop: "{{ checkPresence.stdout_lines | list }}"
  loop_control:
    loop_var: oracle_instance
  when:
    - oracle_ref == "yes"
    - checkPresence.rc == 0
    - checkPresence.stdout != ""

- name: reference initialization
  ansible.builtin.file:
    path: /var/tmp/ora_ref_status_started_{{ oracle_instance }}
    state: absent
  loop: "{{ checkPresence.stdout_lines | list }}"
  loop_control:
    loop_var: oracle_instance
  when:
    - oracle_ref == "yes"
    - checkPresence.rc == 0
    - checkPresence.stdout != ""

-  set_fact:
    tmp_json: ""

-  set_fact:
    state_json: ""

- name: Format to Json
  ansible.builtin.set_fact:
    tmp_json: "{% if line_json.split(';')[4] != \"NOT_RUNNING\" %}{{ tmp_json }}, { \"Oracle_Instance\": \"{{ line_json.split(';')[2] }}\" ,\"Oracle_Version\": \"{{ line_json.split(';')[3] }}\" ,\"Cluster\": \"{{ line_json.split(';')[5] }}\",\"Instance_Type\": \"{{ line_json.split(';')[6] }}\" ,\"Instance_Role\": \"{{ line_json.split(';')[7] }}\" ,\"Instance_Status\": \"{{ line_json.split(';')[8] }}\" ,\"Open_Mode\": \"{{ line_json.split(';')[9] }}\", \"Log_Mode\": \"{{ line_json.split(';')[13] }}\" ,\"Oracle_Conformity\": \"{% if line_json.split(';')[7] == \"PRIMARY\" and line_json.split(';')[9] == \"READ WRITE\"%}OK{% else %}{% if line_json.split(';')[7] == \"STANDBY\" and ( line_json.split(';')[9] == \"READ ONLY WITH APPLY\" or line_json.split(';')[9] == \"MOUNTED\" ) %}OK{% else %}KO{% endif %}{% endif %}\" }{% else %}{{ tmp_json }}, { \"Oracle_Instance\": \"{{ line_json.split(';')[2] }}\" , \"Oracle_Conformity\": \"OK\" }{% endif %}"
  loop: "{{ getinfo.stdout_lines | select('match', '.*;[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9];.*') | list }}"
  loop_control:
    loop_var: line_json
  when:
    - checkPresence.rc == 0
    - checkPresence.stdout != ""

- name: Format to Json
  ansible.builtin.set_fact:
    state_json: "{% if line_json.split(';')[4] != \"NOT_RUNNING\" %}{{ state_json }}, { \"Oracle_Instance\": \"{{ line_json.split(';')[2] }}\" ,\"Oracle_State\": \"Started\" }{% else %}{{ state_json }}, { \"Oracle_Instance\": \"{{ line_json.split(';')[2] }}\" ,\"Oracle_State\": \"Stopped\" }{% endif %}"
#    state_json: "{% if line_json.split(';')[4] != \"NOT_RUNNING\" %}{{ state_json }}, { \"{{ line_json.split(';')[2] }}\": \"Started\" }{% else %}{{ state_json }}, { \"{{ line_json.split(';')[2] }}\": \"Stopped\" }{% endif %}"
  loop: "{{ getinfo.stdout_lines | select('match', '.*;[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9];.*') | list }}"
  loop_control:
    loop_var: line_json
  when:
    - checkPresence.rc == 0
    - checkPresence.stdout != ""

- name: reference status
  shell: echo "STOPPED" > /var/tmp/ora_ref_status_stopped_{{ line_json.split(';')[2] }}
  loop: "{{ getinfo.stdout_lines | select('match', '.*;[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9];.*;;NOT_RUNNING.*') | list }}"
  loop_control:
    loop_var: line_json
  when:
  - oracle_ref == "yes"
  - checkPresence.rc == 0
  - checkPresence.stdout != ""

- name: reference status
  shell: echo "STARTED;{{ line_json }}" > /var/tmp/ora_ref_status_started_{{ line_json.split(';')[2] }}
  loop: "{{ getinfo.stdout_lines | select('match', '.*;[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9];.*;RUNNING.*') | list }}"
  loop_control:
    loop_var: line_json
  when:
  - oracle_ref == "yes"
  - checkPresence.rc == 0
  - checkPresence.stdout != ""

- name: set result output
  ansible.builtin.include_role:
    name: ips_toolbox_set_results
  vars:
    set_results_component: "{{ oracle_component }}"
    set_results_operation: "{{ oracle_operation }}"
    set_results_role_name: "{{ oracle_role_name }}"
    set_results_result_name: "{{ oracle_result_name }}"
    set_results_state: "\

      {% if checkPresence.rc == 1 %}\

        not found\

      {% else %}\

        [ {{ state_json[1:] }} ]
      {% endif %}"
    set_results_item: "\

      {% if oracle_item != 'all' %}\

        {{ oracle_item }}\

      {% else %}\

        {% if checkPresence.stdout != \"\" %}\

            {{ checkPresence.stdout_lines | list }}\

        {% endif %}\

      {% endif %}"
    set_results_value: "\

      {% if checkPresence.rc != 1 %}\

        [ {{ tmp_json[1:] }} ]\

      {% endif %}"
    set_results_status: "OK"

