# roles/app_environment_builder/tasks/detect_middleware.yml
# Détection automatique des middlewares installés
---
- name: "Initialisation de la liste des middlewares détectés"
  ansible.builtin.set_fact:
    detected_middleware_list: []
    middleware_details: {}

- name: "Détection WebSphere Application Server"
  block:
    - name: "Recherche des installations WebSphere"
      ansible.builtin.find:
        paths: 
          - "/opt/IBM/WebSphere"
          - "/usr/IBM/WebSphere"
          - "/apps/IBM/WebSphere"
        patterns: "*.sh"
        recurse: false
      register: websphere_installations
      when: ansible_os_family != "Windows"
      
    - name: "Recherche WebSphere sur Windows"
      ansible.windows.win_find:
        paths:
          - "C:\\IBM\\WebSphere"
          - "D:\\IBM\\WebSphere"
        patterns: "*.bat"
        recurse: false
      register: websphere_installations_win
      when: ansible_os_family == "Windows"
      
    - name: "Détection du type WebSphere"
      ansible.builtin.shell: |
        find /opt/IBM/WebSphere -name "versionInfo.sh" -exec {} \; 2>/dev/null | head -5
      register: websphere_version_check
      changed_when: false
      failed_when: false
      when: ansible_os_family != "Windows" and websphere_installations.matched > 0
      
    - name: "Ajout de WebSphere WAS ND à la liste"
      ansible.builtin.set_fact:
        detected_middleware_list: "{{ detected_middleware_list + ['WebSphere_WAS_ND'] }}"
        middleware_details: "{{ middleware_details | combine({'WebSphere_WAS_ND': {'version': websphere_version_check.stdout | default('Unknown'), 'path': '/opt/IBM/WebSphere/AppServer'}}) }}"
      when: websphere_version_check.stdout is defined and 'Network Deployment' in websphere_version_check.stdout
      
    - name: "Ajout de WebSphere WAS Base à la liste"
      ansible.builtin.set_fact:
        detected_middleware_list: "{{ detected_middleware_list + ['WebSphere_WAS_Base'] }}"
        middleware_details: "{{ middleware_details | combine({'WebSphere_WAS_Base': {'version': websphere_version_check.stdout | default('Unknown'), 'path': '/opt/IBM/WebSphere/AppServer'}}) }}"
      when: websphere_version_check.stdout is defined and 'Base' in websphere_version_check.stdout
      
  tags: [websphere]

- name: "Détection Liberty"
  block:
    - name: "Recherche des installations Liberty"
      ansible.builtin.find:
        paths:
          - "/opt/IBM/WebSphere/Liberty"
          - "/usr/IBM/WebSphere/Liberty"
          - "/apps/IBM/WebSphere/Liberty"
        patterns: "server"
        file_type: "file"
      register: liberty_installations
      when: ansible_os_family != "Windows"
      
    - name: "Vérification du type Liberty"
      ansible.builtin.shell: |
        find /opt/IBM/WebSphere/Liberty -name "server" -exec {} version \; 2>/dev/null | head -3
      register: liberty_version_check
      changed_when: false
      failed_when: false
      when: ansible_os_family != "Windows" and liberty_installations.matched > 0
      
    - name: "Ajout de Liberty Core à la liste"
      ansible.builtin.set_fact:
        detected_middleware_list: "{{ detected_middleware_list + ['Liberty_Core'] }}"
        middleware_details: "{{ middleware_details | combine({'Liberty_Core': {'version': liberty_version_check.stdout | default('Unknown'), 'path': '/opt/IBM/WebSphere/Liberty'}}) }}"
      when: liberty_version_check.stdout is defined and 'Core' in liberty_version_check.stdout
      
    - name: "Ajout de Liberty Base à la liste"
      ansible.builtin.set_fact:
        detected_middleware_list: "{{ detected_middleware_list + ['Liberty_Base'] }}"
        middleware_details: "{{ middleware_details | combine({'Liberty_Base': {'version': liberty_version_check.stdout | default('Unknown'), 'path': '/opt/IBM/WebSphere/Liberty'}}) }}"
      when: liberty_version_check.stdout is defined and 'Base' in liberty_version_check.stdout
      
  tags: [liberty]

- name: "Détection IBM HTTP Server (IHS)"
  block:
    - name: "Recherche des installations IHS"
      ansible.builtin.find:
        paths:
          - "/opt/IBM/HTTPServer"
          - "/usr/IBM/HTTPServer"
          - "/apps/IBM/HTTPServer"
        patterns: "httpd"
        file_type: "file"
      register: ihs_installations
      when: ansible_os_family != "Windows"
      
    - name: "Vérification de la version IHS"
      ansible.builtin.shell: |
        /opt/IBM/HTTPServer/bin/httpd -v 2>/dev/null || /usr/IBM/HTTPServer/bin/httpd -v 2>/dev/null
      register: ihs_version_check
      changed_when: false
      failed_when: false
      when: ansible_os_family != "Windows" and ihs_installations.matched > 0
      
    - name: "Ajout d'IHS à la liste"
      ansible.builtin.set_fact:
        detected_middleware_list: "{{ detected_middleware_list + ['IHS'] }}"
        middleware_details: "{{ middleware_details | combine({'IHS': {'version': ihs_version_check.stdout | default('Unknown'), 'path': '/opt/IBM/HTTPServer'}}) }}"
      when: ihs_installations.matched > 0
      
  tags: [ihs]

- name: "Détection Oracle Database"
  block:
    - name: "Recherche du fichier oratab"
      ansible.builtin.stat:
        path: "/etc/oratab"
      register: oratab_file
      when: ansible_os_family != "Windows"
      
    - name: "Lecture des instances Oracle"
      ansible.builtin.shell: |
        grep -v "^#" /etc/oratab | grep -v "^$" | cut -d: -f1,2
      register: oracle_instances
      changed_when: false
      failed_when: false
      when: ansible_os_family != "Windows" and oratab_file.stat.exists
      
    - name: "Vérification des versions Oracle"
      ansible.builtin.shell: |
        ps -ef | grep "ora_pmon" | grep -v grep
      register: oracle_processes
      changed_when: false
      failed_when: false
      when: ansible_os_family != "Windows"
      
    - name: "Ajout d'Oracle à la liste"
      ansible.builtin.set_fact:
        detected_middleware_list: "{{ detected_middleware_list + ['Oracle'] }}"
        middleware_details: "{{ middleware_details | combine({'Oracle': {'instances': oracle_instances.stdout_lines | default([]), 'processes': oracle_processes.stdout_lines | default([])}}) }}"
      when: (oratab_file.stat.exists | default(false)) or (oracle_processes.stdout_lines | default([]) | length > 0)
      
  tags: [oracle]

- name: "Détection SQL Server"
  block:
    - name: "Recherche SQL Server sur Linux"
      ansible.builtin.shell: |
        systemctl status mssql-server 2>/dev/null || service mssql-server status 2>/dev/null
      register: sqlserver_linux
      changed_when: false
      failed_when: false
      when: ansible_os_family == "RedHat"
      
    - name: "Recherche SQL Server sur Windows"
      ansible.windows.win_shell: |
        Get-Service | Where-Object {$_.Name -match "MSSQL"} | Select-Object Name, Status
      register: sqlserver_windows
      changed_when: false
      failed_when: false
      when: ansible_os_family == "Windows"
      
    - name: "Ajout de SQL Server à la liste"
      ansible.builtin.set_fact:
        detected_middleware_list: "{{ detected_middleware_list + ['SQLServer'] }}"
        middleware_details: "{{ middleware_details | combine({'SQLServer': {'platform': ansible_os_family, 'status': 'detected'}}) }}"
      when: (sqlserver_linux.rc is defined and sqlserver_linux.rc == 0) or (sqlserver_windows.stdout is defined and 'MSSQL' in sqlserver_windows.stdout)
      
  tags: [sqlserver]

- name: "Détection MQ Series"
  block:
    - name: "Recherche des installations MQ"
      ansible.builtin.find:
        paths:
          - "/opt/mqm"
          - "/usr/mqm"
        patterns: "dspmqver"
        file_type: "file"
      register: mq_installations
      when: ansible_os_family != "Windows"
      
    - name: "Vérification de la version MQ"
      ansible.builtin.shell: |
        /opt/mqm/bin/dspmqver 2>/dev/null | head -5
      register: mq_version
      changed_when: false
      failed_when: false
      when: ansible_os_family != "Windows" and mq_installations.matched > 0
      
    - name: "Recherche des Queue Managers"
      ansible.builtin.shell: |
        /opt/mqm/bin/dspmq 2>/dev/null
      register: mq_qmanagers
      changed_when: false
      failed_when: false
      when: ansible_os_family != "Windows" and mq_installations.matched > 0
      
    - name: "Ajout de MQ Series à la liste"
      ansible.builtin.set_fact:
        detected_middleware_list: "{{ detected_middleware_list + ['MQSeries'] }}"
        middleware_details: "{{ middleware_details | combine({'MQSeries': {'version': mq_version.stdout | default('Unknown'), 'qmanagers': mq_qmanagers.stdout_lines | default([])}}) }}"
      when: mq_installations.matched > 0
      
  tags: [mq]

- name: "Détection CFT (Cross File Transfer)"
  block:
    - name: "Recherche des installations CFT"
      ansible.builtin.find:
        paths:
          - "/opt/axway"
          - "/usr/cft"
          - "/apps/cft"
        patterns: "cft*"
        file_type: "directory"
      register: cft_installations
      when: ansible_os_family != "Windows"
      
    - name: "Vérification des processus CFT"
      ansible.builtin.shell: |
        ps -ef | grep -i cft | grep -v grep
      register: cft_processes
      changed_when: false
      failed_when: false
      when: ansible_os_family != "Windows"
      
    - name: "Ajout de CFT à la liste"
      ansible.builtin.set_fact:
        detected_middleware_list: "{{ detected_middleware_list + ['CFT'] }}"
        middleware_details: "{{ middleware_details | combine({'CFT': {'installations': cft_installations.matched | default(0), 'processes': cft_processes.stdout_lines | default([])}}) }}"
      when: cft_installations.matched > 0 or (cft_processes.stdout_lines | default([]) | length > 0)
      
  tags: [cft]

- name: "Détection Illumio"
  block:
    - name: "Recherche des agents Illumio"
      ansible.builtin.shell: |
        systemctl status illumio-ven 2>/dev/null || service illumio-ven status 2>/dev/null
      register: illumio_service
      changed_when: false
      failed_when: false
      when: ansible_os_family != "Windows"
      
    - name: "Vérification des processus Illumio"
      ansible.builtin.shell: |
        ps -ef | grep illumio | grep -v grep
      register: illumio_processes
      changed_when: false
      failed_when: false
      when: ansible_os_family != "Windows"
      
    - name: "Ajout d'Illumio à la liste"
      ansible.builtin.set_fact:
        detected_middleware_list: "{{ detected_middleware_list + ['Illumio'] }}"
        middleware_details: "{{ middleware_details | combine({'Illumio': {'service_status': illumio_service.stdout | default('Unknown'), 'processes': illumio_processes.stdout_lines | default([])}}) }}"
      when: (illumio_service.rc is defined and illumio_service.rc == 0) or (illumio_processes.stdout_lines | default([]) | length > 0)
      
  tags: [illumio]

- name: "Détection TSM/Spectrum Protect"
  block:
    - name: "Recherche des clients TSM"
      ansible.builtin.find:
        paths:
          - "/opt/tivoli/tsm/client"
          - "/usr/tivoli/tsm/client"
        patterns: "dsmc"
        file_type: "file"
      register: tsm_installations
      when: ansible_os_family != "Windows"
      
    - name: "Vérification de la version TSM"
      ansible.builtin.shell: |
        /opt/tivoli/tsm/client/ba/bin/dsmc query session 2>/dev/null | head -3
      register: tsm_version
      changed_when: false
      failed_when: false
      when: ansible_os_family != "Windows" and tsm_installations.matched > 0
      
    - name: "Ajout de TSM à la liste"
      ansible.builtin.set_fact:
        detected_middleware_list: "{{ detected_middleware_list + ['TSM'] }}"
        middleware_details: "{{ middleware_details | combine({'TSM': {'version': tsm_version.stdout | default('Unknown'), 'path': '/opt/tivoli/tsm/client'}}) }}"
      when: tsm_installations.matched > 0
      
  tags: [tsm]

- name: "Consolidation finale des middlewares détectés"
  ansible.builtin.set_fact:
    middleware_detection_summary:
      detected_count: "{{ detected_middleware_list | length }}"
      detected_list: "{{ detected_middleware_list }}"
      details: "{{ middleware_details }}"
      detection_timestamp: "{{ ansible_date_time.iso8601 }}"
      detection_host: "{{ ansible_hostname }}"
      
- name: "Affichage du résumé de détection des middlewares"
  ansible.builtin.debug:
    msg: |
      =========================================================
      DÉTECTION DES MIDDLEWARES TERMINÉE
      =========================================================
      Serveur: {{ ansible_hostname }}
      Nombre de middlewares détectés: {{ detected_middleware_list | length }}
      Liste: {{ detected_middleware_list | join(', ') if detected_middleware_list else 'Aucun middleware détecté' }}
      =========================================================
  tags: [debug]

- name: "Enregistrement des facts middleware pour les autres rôles"
  ansible.builtin.set_fact:
    cacheable: true
    middleware_detection_completed: true
    detected_middleware_count: "{{ detected_middleware_list | length }}"