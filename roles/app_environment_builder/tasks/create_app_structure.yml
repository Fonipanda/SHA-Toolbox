# roles/app_environment_builder/tasks/create_app_structure.yml
# Création de l'arborescence applicative selon les normes BP21
---
- name: "Validation des variables pour la création de structure"
  ansible.builtin.assert:
    that:
      - target_codeap is defined
      - target_code5car is defined
      - target_codeap | length == 5
      - target_code5car | length == 5
    fail_msg: "Les variables target_codeap et target_code5car sont obligatoires (5 caractères chacune)"

- name: "Définition des variables de structure applicative"
  ansible.builtin.set_fact:
    app_identifier: "{{ target_codeap }}-{{ target_code5car }}"
    vg_apps_base: "/applis"
    filesystem_list: []
    created_directories: []
    filesystem_modifications: []

- name: "Vérification de l'existence du volume groupe vg_apps"
  ansible.builtin.shell: |
    {% if ansible_os_family == "AIX" %}
    lsvg vg_apps
    {% elif ansible_os_family == "RedHat" %}
    vgs vg_apps
    {% else %}
    echo "Windows - volume check skipped"
    {% endif %}
  register: vg_apps_check
  changed_when: false
  failed_when: false
  when: ansible_os_family != "Windows"

- name: "Alerte si vg_apps n'existe pas"
  ansible.builtin.debug:
    msg: |
      ATTENTION: Le volume groupe vg_apps n'a pas été trouvé.
      Ceci peut indiquer que le SHA n'a pas été correctement installé.
      Poursuite avec les répertoires standards.
  when: ansible_os_family != "Windows" and vg_apps_check.rc != 0

# Création des filesystems selon la norme BP21
- name: "Création des filesystems applicatifs - Unix/Linux"
  block:
    - name: "Définition de la liste des filesystems à créer"
      ansible.builtin.set_fact:
        filesystem_definitions:
          - name: "lv_{{ target_code5car }}"
            mount_point: "/applis/{{ app_identifier }}"
            size: "1G"
            description: "Filesystem principal application"
          - name: "lv_{{ target_code5car }}_ti"
            mount_point: "/applis/{{ app_identifier }}/transfer/in"
            size: "1G"
            description: "Filesystem transfer/in"
          - name: "lv_{{ target_code5car }}_to"
            mount_point: "/applis/{{ app_identifier }}/transfer/out"
            size: "1G"
            description: "Filesystem transfer/out"
          - name: "lv_{{ target_code5car }}_tmp"
            mount_point: "/applis/{{ app_identifier }}/tmp"
            size: "1G"
            description: "Filesystem temporaire"
          - name: "lv_{{ target_code5car }}_arch"
            mount_point: "/applis/{{ app_identifier }}/archives"
            size: "1G"
            description: "Filesystem archives"
          - name: "lv_log_{{ target_code5car }}"
            mount_point: "/applis/logs/{{ app_identifier }}"
            size: "1G"
            description: "Filesystem logs"
          - name: "lv_dlv_{{ target_code5car }}"
            mount_point: "/applis/delivery/{{ app_identifier }}"
            size: "2G"
            description: "Filesystem delivery"

    - name: "Utilisation du rôle ips_toolbox_system pour créer les filesystems"
      ansible.builtin.include_role:
        name: ips_toolbox_system
        tasks_from: "create_directory_{{ ansible_os_family }}_system.yml"
      vars:
        filesystem_name: "{{ item.name }}"
        mount_point: "{{ item.mount_point }}"
        size: "{{ item.size }}"
        volume_group: "vg_apps"
      loop: "{{ filesystem_definitions }}"
      register: filesystem_creation_results
      
    - name: "Enregistrement des modifications de filesystems"
      ansible.builtin.set_fact:
        filesystem_modifications: "{{ filesystem_modifications + [{'name': item.item.name, 'mount_point': item.item.mount_point, 'size': item.item.size, 'status': 'created' if item.changed else 'exists'}] }}"
      loop: "{{ filesystem_creation_results.results }}"
      when: filesystem_creation_results.results is defined
      
  when: ansible_os_family != "Windows"
  tags: [filesystem]

# Création de l'arborescence applicative standard
- name: "Création de l'arborescence applicative standard"
  block:
    - name: "Création des répertoires principaux"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ app_owner | default('root') }}"
        group: "{{ app_group | default('root') }}"
        mode: '0755'
      loop:
        - "/applis/{{ app_identifier }}"
        - "/applis/{{ app_identifier }}/was"
        - "/applis/{{ app_identifier }}/wlc" 
        - "/applis/{{ app_identifier }}/wlb"
        - "/applis/{{ app_identifier }}/ihs"
        - "/applis/{{ app_identifier }}/archives"
        - "/applis/{{ app_identifier }}/conf"
        - "/applis/{{ app_identifier }}/scripts"
        - "/applis/{{ app_identifier }}/shared"
        - "/applis/{{ app_identifier }}/tmp"
        - "/applis/{{ app_identifier }}/transfer"
        - "/applis/{{ app_identifier }}/transfer/in"
        - "/applis/{{ app_identifier }}/transfer/out"
        - "/applis/logs/{{ app_identifier }}"
        - "/applis/logs/{{ app_identifier }}/was"
        - "/applis/logs/{{ app_identifier }}/wlc"
        - "/applis/logs/{{ app_identifier }}/wlb"
        - "/applis/logs/{{ app_identifier }}/ihs"
        - "/applis/logs/{{ app_identifier }}/delivery"
        - "/applis/delivery/{{ app_identifier }}"
      register: directory_creation
      
    - name: "Enregistrement des répertoires créés"
      ansible.builtin.set_fact:
        created_directories: "{{ created_directories + [item.path] }}"
      loop: "{{ directory_creation.results }}"
      when: directory_creation.results is defined and item.changed
      
  when: ansible_os_family != "Windows"
  tags: [directories]

# Création de l'arborescence pour Windows
- name: "Création de l'arborescence applicative Windows"
  block:
    - name: "Création des répertoires principaux Windows"
      ansible.windows.win_file:
        path: "{{ item }}"
        state: directory
      loop:
        - "D:\\applis\\{{ app_identifier }}"
        - "D:\\applis\\{{ app_identifier }}\\was"
        - "D:\\applis\\{{ app_identifier }}\\ihs"
        - "D:\\applis\\{{ app_identifier }}\\archives"
        - "D:\\applis\\{{ app_identifier }}\\conf"
        - "D:\\applis\\{{ app_identifier }}\\scripts"
        - "D:\\applis\\{{ app_identifier }}\\shared"
        - "D:\\applis\\{{ app_identifier }}\\tmp"
        - "D:\\applis\\{{ app_identifier }}\\transfer"
        - "D:\\applis\\{{ app_identifier }}\\transfer\\in"
        - "D:\\applis\\{{ app_identifier }}\\transfer\\out"
        - "D:\\applis\\logs\\{{ app_identifier }}"
        - "D:\\applis\\logs\\{{ app_identifier }}\\was"
        - "D:\\applis\\logs\\{{ app_identifier }}\\ihs"
        - "D:\\applis\\logs\\{{ app_identifier }}\\delivery"
        - "D:\\applis\\delivery\\{{ app_identifier }}"
      register: directory_creation_win
      
  when: ansible_os_family == "Windows"
  tags: [directories]

# Création des liens symboliques requis
- name: "Création des liens symboliques pour les scripts"
  block:
    - name: "Création du répertoire /etc/local s'il n'existe pas"
      ansible.builtin.file:
        path: "/etc/local"
        state: directory
        mode: '0755'
      when: ansible_os_family != "Windows"
      
    - name: "Création des scripts de base applicatifs"
      ansible.builtin.template:
        src: "app_script_template.j2"
        dest: "/applis/{{ app_identifier }}/scripts/app_{{ target_code5car }}_{{ item }}"
        mode: '0755'
        owner: "{{ app_owner | default('root') }}"
        group: "{{ app_group | default('root') }}"
      loop:
        - "start"
        - "stop"
        - "status"
        - "restart"
      when: ansible_os_family != "Windows"
      register: script_creation
      
    - name: "Création des liens symboliques dans /etc/local"
      ansible.builtin.file:
        src: "/applis/{{ app_identifier }}/scripts/app_{{ target_code5car }}_{{ item }}"
        dest: "/etc/local/app_{{ target_code5car }}_{{ item }}"
        state: link
      loop:
        - "start"
        - "stop"
        - "status"
        - "restart"
      when: ansible_os_family != "Windows" and script_creation is succeeded
      
  tags: [scripts]

# Création du lien symbolique current pour delivery
- name: "Création du lien symbolique current pour delivery"
  ansible.builtin.file:
    src: "/applis/delivery/{{ app_identifier }}/v1.0"
    dest: "/applis/delivery/{{ app_identifier }}/current"
    state: link
  when: ansible_os_family != "Windows"
  tags: [delivery]

# Vérification finale de la structure créée
- name: "Vérification de la structure créée"
  ansible.builtin.stat:
    path: "/applis/{{ app_identifier }}"
  register: final_structure_check
  when: ansible_os_family != "Windows"

- name: "Vérification de la structure créée - Windows"
  ansible.windows.win_stat:
    path: "D:\\applis\\{{ app_identifier }}"
  register: final_structure_check_win
  when: ansible_os_family == "Windows"

- name: "Génération du rapport de création de structure"
  ansible.builtin.set_fact:
    structure_creation_report:
      app_identifier: "{{ app_identifier }}"
      target_codeap: "{{ target_codeap }}"
      target_code5car: "{{ target_code5car }}"
      filesystems_created: "{{ filesystem_modifications | length | default(0) }}"
      directories_created: "{{ created_directories | length | default(0) }}"
      structure_valid: "{{ final_structure_check.stat.exists | default(false) or final_structure_check_win.stat.exists | default(false) }}"
      creation_timestamp: "{{ ansible_date_time.iso8601 }}"
      os_family: "{{ ansible_os_family }}"

- name: "Affichage du rapport de création"
  ansible.builtin.debug:
    msg: |
      =========================================================
      CRÉATION DE L'ARBORESCENCE APPLICATIVE TERMINÉE
      =========================================================
      Application: {{ app_identifier }}
      Code AP: {{ target_codeap }}
      Code5car: {{ target_code5car }}
      OS: {{ ansible_os_family }}
      Filesystems créés: {{ filesystem_modifications | length | default(0) }}
      Répertoires créés: {{ created_directories | length | default(0) }}
      Structure valide: {{ 'OUI' if structure_creation_report.structure_valid else 'NON' }}
      =========================================================