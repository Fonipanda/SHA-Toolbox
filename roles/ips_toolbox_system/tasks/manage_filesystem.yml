---
# Manage filesystems - Create, extend, or delete

- name: Validate filesystem parameters
  assert:
    that:
      - codeap is defined or filesystem_name is defined
      - filesystem_action in ['create', 'extend', 'delete']
      - vg_name is defined
      - vg_name != vg_rootvg
    fail_msg: "Invalid filesystem parameters or attempting to modify rootvg"
    success_msg: "Filesystem parameters validated"

- name: Set filesystem variables
  set_fact:
    fs_lv_name: "{{ lv_name | default('lv_' + codescar | default(codeap)) }}"
    fs_mount_point: "{{ mount_point | default(sha_applis_path + '/' + codeap + '-' + codescar + (('-' + id) if id is defined else '')) }}"
    fs_size: "{{ size | default(fs_default_sizes.appli_base) }}"

- name: Check if volume group exists
  command: vgs {{ vg_name }} --noheadings
  register: vg_exists
  changed_when: false
  failed_when: false

- name: Fail if volume group does not exist
  fail:
    msg: "Volume group {{ vg_name }} does not exist"
  when: vg_exists.rc != 0

- name: Create filesystem block
  when: filesystem_action == 'create'
  block:
    - name: Check if logical volume already exists
      command: lvs {{ vg_name }}/{{ fs_lv_name }} --noheadings
      register: lv_exists
      changed_when: false
      failed_when: false

    - name: Create logical volume
      command: >
        lvcreate -L {{ fs_size }}G -n {{ fs_lv_name }} {{ vg_name }}
      when: lv_exists.rc != 0
      register: lv_created

    - name: Create filesystem on logical volume
      filesystem:
        fstype: "{{ default_filesystem_options.type }}"
        dev: "/dev/{{ vg_name }}/{{ fs_lv_name }}"
      when: lv_created is changed

    - name: Create mount point directory
      file:
        path: "{{ fs_mount_point }}"
        state: directory
        mode: "{{ default_directory_permissions.mode }}"
        owner: "{{ default_directory_permissions.owner }}"
        group: "{{ default_directory_permissions.group }}"

    - name: Mount filesystem
      mount:
        path: "{{ fs_mount_point }}"
        src: "/dev/{{ vg_name }}/{{ fs_lv_name }}"
        fstype: "{{ default_filesystem_options.type }}"
        opts: "{{ default_filesystem_options.mount_options }}"
        state: mounted

    - name: Set filesystem created fact
      set_fact:
        filesystem_created: true
        filesystem_info:
          lv_name: "{{ fs_lv_name }}"
          vg_name: "{{ vg_name }}"
          mount_point: "{{ fs_mount_point }}"
          size: "{{ fs_size }}G"

- name: Extend filesystem block
  when: filesystem_action == 'extend'
  block:
    - name: Check if logical volume exists
      command: lvs {{ vg_name }}/{{ fs_lv_name }} --noheadings
      register: lv_exists_extend
      changed_when: false
      failed_when: lv_exists_extend.rc != 0

    - name: Extend logical volume
      command: >
        lvextend -L +{{ fs_size }}G /dev/{{ vg_name }}/{{ fs_lv_name }}
      register: lv_extended

    - name: Resize filesystem
      command: >
        xfs_growfs {{ fs_mount_point }}
      when:
        - lv_extended is changed
        - default_filesystem_options.type == 'xfs'

    - name: Resize ext4 filesystem
      command: >
        resize2fs /dev/{{ vg_name }}/{{ fs_lv_name }}
      when:
        - lv_extended is changed
        - default_filesystem_options.type == 'ext4'

- name: Delete filesystem block
  when: filesystem_action == 'delete'
  block:
    - name: Confirm deletion
      pause:
        prompt: "Are you sure you want to delete {{ fs_mount_point }}? (yes/no)"
      register: delete_confirm
      when: not (force_delete | default(false) | bool)

    - name: Unmount filesystem
      mount:
        path: "{{ fs_mount_point }}"
        state: absent
      when: force_delete | default(false) | bool or delete_confirm.user_input == 'yes'

    - name: Remove logical volume
      command: >
        lvremove -f /dev/{{ vg_name }}/{{ fs_lv_name }}
      when: force_delete | default(false) | bool or delete_confirm.user_input == 'yes'

    - name: Remove mount point directory
      file:
        path: "{{ fs_mount_point }}"
        state: absent
      when: force_delete | default(false) | bool or delete_confirm.user_input == 'yes'
