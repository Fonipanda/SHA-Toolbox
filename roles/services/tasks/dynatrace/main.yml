---
- name: Check status and enable fullstack
  block:
    - name: Create dict for every option version
      ansible.builtin.set_fact:
        dynatrace_option:
          old_version:
            fullstack_status: "--get-infra-only"
            set_fullstack: "--set-infra-only=false --set-auto-injection-enabled=true --restart-service"
          new_version:
            fullstack_status: "--get-monitoring-mode"
            set_fullstack: "--set-monitoring-mode=fullstack --restart-service"

    - name: Detect dynatrace version
      ansible.builtin.command:
        cmd: "{{ services.dynatrace.paths.agent }} --version"
      become: true
      register: dynatrace_version

    - name: Set dynatrace options to choose
      ansible.builtin.set_fact:
        dynatrace_version: "{{ 'new_version' if dynatrace_version.stdout is version('1.273', '>=') else 'old_version' }}"

    - name: Check fullstack status
      ansible.builtin.command:
        cmd: "{{ services.dynatrace.paths.agent }} {{ dynatrace_option[dynatrace_version].fullstack_status }}"
      become: true
      register: fullstack_status
      changed_when: fullstack_status.rc != 0

    - name: Enable fullstack
      ansible.builtin.command:
        cmd: "{{ services.dynatrace.paths.agent }} {{ dynatrace_option[dynatrace_version].set_fullstack }}"
      become: true
      when: fullstack_status.stdout not in ['false','fullstack']

    - name: Set succes dynatrace output var fullstack
      ansible.builtin.set_fact:
        services_dynatrace:
          output: "Dynatrace for {{ inventory_hostname }} successfully configured"
          fullstack: true
          rescue:
            - name: Set fail dynatrace output var not configured
              ansible.builtin.set_fact:
                services_dynatrace:
                  output: "Dynatrace for {{ inventory_hostname }} configuration failed"
                  fullstack: false

