---
- name: Check if dsm.opt.j2 template exists
  stat:
    path: "{{ role_path }}/templates/dsm.opt.j2"
  register: dsm_opt_template

- name: Configure TSM
  ansible.builtin.template:
    src: dsm.opt.j2
    dest: "{{ services.tsm.paths.dsm_config }}"
    owner: root
    group: root
    mode: '0644'
  become: true
  when: dsm_opt_template.stat.exists

- name: Skip TSM configuration if template does not exist
  debug:
    msg: "Skipping TSM configuration because dsm.opt.j2 template does not exist."
  when: not dsm_opt_template.stat.exists

- name: Start TSM client
  ansible.builtin.command:
    cmd: "{{ services.tsm.paths.dsm }} schedule"
  become: true
  register: tsm_start
  changed_when: tsm_start.rc == 0

- name: Enable TSM client to start on boot
  ansible.builtin.systemd:
    name: tsm-client
    enabled: yes
  become: true

- name: Verify if all TSM path is available
  stat:
    path: "{{ item }}"
  loop:
    - /apps/sys/admin/tsm_system/dsm.opt
    - /opt/tivoli/tsm/client/ba/bin/dsmc
  register: tsm_paths

- name: Fail if tsm paths not exist
  fail:
    msg: "TSM path {{ item.item }} does not exist."
  when: not item.stat.exists
  loop: "{{ tsm_paths.results }}"

- name: Check REAR backup and start if not exist
  include_tasks: rear/main.yml

- name: Check TSM session
  command: /opt/tivoli/tsm/client/ba/bin/dsmc session
  register: tsm_session

- name: Backup REAR backup on TSM server
  command: /opt/tivoli/tsm/client/ba/bin/dsmc inc /apps/sys/back/rear-{{ inventory_hostname | lower }}.tar

- name: Check backup is pushed on TSM
  command: /opt/tivoli/tsm/client/ba/bin/dsmc query archive /apps/sys/back/rear-{{ inventory_hostname | lower }}.tar
  register: tsm_backup

- name: Set success TSM output var
  set_fact:
    services_tsm:
      output: "TSM backup for {{ inventory_hostname }} successfully"
      created: true
