# main_playbook_isoprod.yml
# Main playbook pour environnement ISO-PRODUCTION
# Détecte automatiquement l'OS et middleware, construit l'environnement applicatif
---
- name: "SHA Application Environment Builder - ISO-PRODUCTION"
  hosts: "{{ hostname | default('all') }}"
  gather_facts: true
  become: true
  serial: 1
  
  vars:
    environment_type: "ISOPROD"
    code_ap: "{{ CodeAP }}"
    code5car: "{{ code5car }}"
    hostname_target: "{{ Hostname }}"
    
    # Variables de reporting
    execution_timestamp: "{{ ansible_date_time.iso8601 }}"
    execution_id: "{{ ansible_date_time.epoch }}"
    report_dir: "/tmp/ansible_reports"
    
    # Variables spécifiques ISOPROD (moins strictes que PROD)
    validation_level: "medium"
    allow_testing_features: true
    
  pre_tasks:
    - name: "[ISOPROD] Validation des variables obligatoires"
      ansible.builtin.assert:
        that:
          - CodeAP is defined and CodeAP != ""
          - code5car is defined and code5car != ""
          - Hostname is defined and Hostname != ""
        fail_msg: "Les variables CodeAP, code5car et Hostname sont obligatoires"
      tags: [validation]
    
    - name: "[ISOPROD] Création du répertoire de rapport"
      ansible.builtin.file:
        path: "{{ report_dir }}"
        state: directory
        mode: '0755'
      tags: [setup]
      
    - name: "[ISOPROD] Initialisation du rapport d'exécution"
      ansible.builtin.set_fact:
        execution_report:
          environment: "{{ environment_type }}"
          hostname: "{{ hostname_target }}"
          code_ap: "{{ code_ap }}"
          code5car: "{{ code5car }}"
          execution_id: "{{ execution_id }}"
          start_time: "{{ execution_timestamp }}"
          detected_os: ""
          detected_middleware: []
          filesystem_changes: []
          installed_packages: []
          created_users: []
          modified_configs: []
          services_status: []
          errors: []
          warnings: []
      tags: [setup]

  tasks:
    # Phase 1: Détection et collecte des faits
    - name: "[ISOPROD] Phase 1 - Détection de l'environnement"
      block:
        - name: "[ISOPROD] Détection de l'OS et collecte des faits système"
          ansible.builtin.include_role:
            name: app_environment_builder
            tasks_from: detect_os
          tags: [detection]
          
        - name: "[ISOPROD] Détection du middleware installé"
          ansible.builtin.include_role:
            name: app_environment_builder
            tasks_from: detect_middleware
          tags: [detection]
          
        - name: "[ISOPROD] Mise à jour du rapport avec les détections"
          ansible.builtin.set_fact:
            execution_report: "{{ execution_report | combine({
              'detected_os': detected_os_info,
              'detected_middleware': detected_middleware_list
            }) }}"
          tags: [detection]
          
    # Phase 2: Sauvegarde et point de restauration (optionnel en ISOPROD)
    - name: "[ISOPROD] Phase 2 - Création du point de sauvegarde"
      block:
        - name: "[ISOPROD] Création du point de rollback"
          ansible.builtin.include_role:
            name: backup_manager
            tasks_from: create_rollback_point
          vars:
            backup_type: "pre_deployment_isoprod"
            backup_retention: "7d"  # Plus court qu'en PROD
          tags: [backup]
          
    # Phase 3: Création de l'environnement applicatif
    - name: "[ISOPROD] Phase 3 - Construction de l'environnement applicatif"
      block:
        - name: "[ISOPROD] Vérification de la conformité du serveur (niveau moyen)"
          ansible.builtin.include_role:
            name: ips_toolbox_system
          vars:
            system_operation: "check_conformity"
            validation_level: "{{ validation_level }}"
          tags: [verification]
          
        - name: "[ISOPROD] Création de l'arborescence applicative"
          ansible.builtin.include_role:
            name: app_environment_builder
            tasks_from: create_app_structure
          vars:
            target_codeap: "{{ code_ap }}"
            target_code5car: "{{ code5car }}"
            environment_type: "ISOPROD"
          tags: [filesystem]
          
        # Appel conditionnel selon l'OS détecté
        - name: "[ISOPROD] Configuration spécifique AIX"
          ansible.builtin.include_role:
            name: app_environment_builder
            tasks_from: aix_setup
          vars:
            environment_type: "ISOPROD"
          when: detected_os_info.family == "AIX"
          tags: [os_specific]
          
        - name: "[ISOPROD] Configuration spécifique RHEL"
          ansible.builtin.include_role:
            name: app_environment_builder
            tasks_from: rhel_setup
          vars:
            environment_type: "ISOPROD"
          when: detected_os_info.family == "RedHat"
          tags: [os_specific]
          
        - name: "[ISOPROD] Configuration spécifique Windows"
          ansible.builtin.include_role:
            name: app_environment_builder
            tasks_from: windows_setup
          vars:
            environment_type: "ISOPROD"
          when: detected_os_info.family == "Windows"
          tags: [os_specific]
          
    # Phase 4: Configuration des middlewares détectés (avec options de test)
    - name: "[ISOPROD] Phase 4 - Configuration des middlewares"
      block:
        - name: "[ISOPROD] Configuration WebSphere WAS ND"
          ansible.builtin.include_role:
            name: ips_toolbox_wasnd
          vars:
            was_environment: "ISOPROD"
            enable_debug_mode: "{{ allow_testing_features }}"
          when: "'WebSphere_WAS_ND' in detected_middleware_list"
          tags: [middleware]
          
        - name: "[ISOPROD] Configuration WebSphere WAS Base"
          ansible.builtin.include_role:
            name: ips_toolbox_wasbase
          vars:
            was_environment: "ISOPROD"
            enable_debug_mode: "{{ allow_testing_features }}"
          when: "'WebSphere_WAS_Base' in detected_middleware_list"
          tags: [middleware]
          
        - name: "[ISOPROD] Configuration Liberty Core"
          ansible.builtin.include_role:
            name: ips_toolbox_libertycore
          vars:
            liberty_environment: "ISOPROD"
          when: "'Liberty_Core' in detected_middleware_list"
          tags: [middleware]
          
        - name: "[ISOPROD] Configuration Liberty Base"
          ansible.builtin.include_role:
            name: ips_toolbox_libertybase
          vars:
            liberty_environment: "ISOPROD"
          when: "'Liberty_Base' in detected_middleware_list"
          tags: [middleware]
          
        - name: "[ISOPROD] Configuration IHS Web Server"
          ansible.builtin.include_role:
            name: ips_toolbox_webserver
          vars:
            ihs_environment: "ISOPROD"
          when: "'IHS' in detected_middleware_list"
          tags: [middleware]
          
        - name: "[ISOPROD] Configuration Oracle Database"
          ansible.builtin.include_role:
            name: ips_toolbox_oracle
          vars:
            oracle_environment: "ISOPROD"
          when: "'Oracle' in detected_middleware_list"
          tags: [middleware]
          
        - name: "[ISOPROD] Configuration SQL Server"
          ansible.builtin.include_role:
            name: ips_toolbox_sqlserver
          vars:
            sqlserver_environment: "ISOPROD"
          when: "'SQLServer' in detected_middleware_list"
          tags: [middleware]
          
        - name: "[ISOPROD] Configuration MQ Series"
          ansible.builtin.include_role:
            name: ips_toolbox_mq
          vars:
            mq_environment: "ISOPROD"
          when: "'MQSeries' in detected_middleware_list"
          tags: [middleware]
          
        - name: "[ISOPROD] Configuration CFT"
          ansible.builtin.include_role:
            name: ips_toolbox_cft
          vars:
            cft_environment: "ISOPROD"
          when: "'CFT' in detected_middleware_list"
          tags: [middleware]
          
    # Phase 5: Configuration des services système
    - name: "[ISOPROD] Phase 5 - Configuration des services système"
      block:
        - name: "[ISOPROD] Configuration Toolbox système"
          ansible.builtin.include_role:
            name: ips_toolbox_toolboxes
          vars:
            toolbox_environment: "ISOPROD"
          tags: [toolbox]
          
        - name: "[ISOPROD] Configuration de la sauvegarde TSM"
          ansible.builtin.include_role:
            name: ips_toolbox_backup
          vars:
            backup_operation: "configure_appli_backup"
            backup_codeap: "{{ code_ap }}"
            backup_code5car: "{{ code5car }}"
            backup_environment: "ISOPROD"
            backup_frequency: "daily"  # Plus fréquent qu'en PROD pour les tests
          tags: [backup]
          
        - name: "[ISOPROD] Configuration Illumio (si présent)"
          ansible.builtin.include_role:
            name: ips_toolbox_illumio
          vars:
            illumio_environment: "ISOPROD"
            illumio_mode: "test"  # Mode test en ISOPROD
          when: "'Illumio' in detected_middleware_list"
          tags: [security]
          
        - name: "[ISOPROD] Configuration des services applicatifs"
          ansible.builtin.include_role:
            name: ips_toolbox_services
          vars:
            services_environment: "ISOPROD"
          tags: [services]
          
    # Phase 6: Vérifications post-déploiement et tests spécifiques ISOPROD
    - name: "[ISOPROD] Phase 6 - Vérifications et tests"
      block:
        - name: "[ISOPROD] Vérification de l'arborescence créée"
          ansible.builtin.stat:
            path: "/applis/{{ code_ap }}-{{ code5car }}"
          register: appli_dir_check
          tags: [verification]
          
        - name: "[ISOPROD] Vérification des filesystems"
          ansible.builtin.shell: |
            df -h | grep "/applis/{{ code_ap }}-{{ code5car }}"
          register: filesystem_check
          failed_when: false
          changed_when: false
          tags: [verification]
          
        - name: "[ISOPROD] Test des scripts applicatifs"
          ansible.builtin.stat:
            path: "/etc/local/app_{{ code5car }}_status"
          register: appli_scripts_check
          tags: [verification]
          
        - name: "[ISOPROD] Tests de validation spécifiques à l'environnement"
          ansible.builtin.shell: |
            echo "Tests ISOPROD - Validation des permissions"
            ls -la "/applis/{{ code_ap }}-{{ code5car }}"
          register: isoprod_specific_tests
          failed_when: false
          changed_when: false
          tags: [testing]

  post_tasks:
    - name: "[ISOPROD] Génération du rapport final"
      block:
        - name: "[ISOPROD] Collecte des informations finales"
          ansible.builtin.include_role:
            name: report_generator
            tasks_from: collect_facts
          vars:
            environment_type: "ISOPROD"
          tags: [reporting]
          
        - name: "[ISOPROD] Mise à jour du rapport avec les résultats"
          ansible.builtin.set_fact:
            execution_report: "{{ execution_report | combine({
              'end_time': ansible_date_time.iso8601,
              'filesystem_changes': filesystem_modifications | default([]),
              'installed_packages': installed_packages_list | default([]),
              'created_users': created_users_list | default([]),
              'modified_configs': modified_configs_list | default([]),
              'services_status': services_status_list | default([]),
              'test_results': isoprod_specific_tests.stdout_lines | default([]),
              'success': deployment_success | default(true)
            }) }}"
          tags: [reporting]
          
        - name: "[ISOPROD] Génération du rapport JSON"
          ansible.builtin.include_role:
            name: report_generator
            tasks_from: generate_json
          vars:
            environment_type: "ISOPROD"
          tags: [reporting]
          
        - name: "[ISOPROD] Génération du résumé stdout"
          ansible.builtin.include_role:
            name: report_generator
            tasks_from: generate_stdout
          vars:
            environment_type: "ISOPROD"
          tags: [reporting]
          
        - name: "[ISOPROD] Affichage du résumé d'exécution"
          ansible.builtin.debug:
            msg: |
              =========================================================
              RÉSUMÉ D'EXÉCUTION - ENVIRONNEMENT ISO-PRODUCTION
              =========================================================
              Serveur cible    : {{ hostname_target }}
              Code AP          : {{ code_ap }}
              Code5car         : {{ code5car }}
              OS détecté       : {{ detected_os_info.distribution | default('N/A') }} {{ detected_os_info.version | default('') }}
              Middleware       : {{ detected_middleware_list | join(', ') if detected_middleware_list else 'Aucun' }}
              Filesystems créés: {{ filesystem_modifications | length | default(0) }}
              Services configurés: {{ services_status_list | length | default(0) }}
              Tests exécutés   : {{ isoprod_specific_tests.stdout_lines | length | default(0) }}
              Statut           : {{ 'SUCCÈS' if deployment_success | default(true) else 'ÉCHEC' }}
              Rapport JSON     : {{ report_dir }}/execution_report_{{ execution_id }}.json
              =========================================================
          tags: [reporting]

  rescue:
    - name: "[ISOPROD] Gestion des erreurs et rollback"
      block:
        - name: "[ISOPROD] Enregistrement de l'erreur"
          ansible.builtin.set_fact:
            execution_report: "{{ execution_report | combine({
              'errors': execution_report.errors + [ansible_failed_result.msg | default('Erreur inconnue')],
              'success': false,
              'end_time': ansible_date_time.iso8601
            }) }}"
          
        - name: "[ISOPROD] Génération du rapport d'erreur"
          ansible.builtin.include_role:
            name: report_generator
            tasks_from: generate_json
          vars:
            environment_type: "ISOPROD"
          
        - name: "[ISOPROD] Affichage de l'erreur"
          ansible.builtin.debug:
            msg: |
              =========================================================
              ERREUR - ENVIRONNEMENT ISO-PRODUCTION  
              =========================================================
              Une erreur s'est produite lors du déploiement.
              Consulter le rapport JSON pour plus de détails.
              Rapport : {{ report_dir }}/execution_report_{{ execution_id }}.json
              =========================================================
          
        - name: "[ISOPROD] Échec du playbook"
          ansible.builtin.fail:
            msg: "Déploiement échoué en environnement ISO-PRODUCTION"