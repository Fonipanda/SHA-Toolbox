---
# Main Playbook Toolbox
- name: Toolbox - Complete Workflow
  hosts: "{{ target_hosts | default('all') }}"
  gather_facts: yes
  become: yes
  
  vars:
    # Default module if not specified
    toolbox_module: "{{ toolbox_module | default('auto') }}"
    
  pre_tasks:
    - name: Display execution information
      debug:
        msg:
          - "=========================================="
          - "Ansible Toolbox"
          - "=========================================="
          - "Target: {{ inventory_hostname }}"
          - "Module: {{ toolbox_module }}"
          - "Environment: {{ env }}"
          - "SHA Image: {{ sha_image_type | default('standard') }}"
          - "User: {{ ansible_user }}"
          - "=========================================="

    - name: Validate target is not production without confirmation
      pause:
        prompt: "You are targeting PRODUCTION environment. Continue? (yes/no)"
      when:
        - env == 'PROD'
        - not (force_prod | default(false) | bool)
      register: prod_confirm

    - name: Abort if production not confirmed
      fail:
        msg: "Production execution aborted by user"
      when:
        - env == 'PROD'
        - prod_confirm.user_input | default('no') != 'yes'
        - not (force_prod | default(false) | bool)

    - name: Detect installed middleware on SHA image
      stat:
        path: "{{ item.value }}"
      loop: "{{ middleware_paths | dict2items }}"
      register: middleware_detection

    - name: Set detected middleware facts
      set_fact:
        detected_middleware: "{{ middleware_detection.results | 
          selectattr('stat.exists', 'equalto', true) | 
          map(attribute='item.key') | list }}"

    - name: Display detected middleware
      debug:
        msg: "Middleware détectés sur image SHA: {{ detected_middleware }}"

    - name: Auto-select modules based on detected middleware
      set_fact:
        selected_modules: |
          {%- set modules = [] -%}
          {%- if toolbox_module == 'auto' -%}
            {%- set modules = modules + ['operating'] -%}
            {%- if 'websphere' in detected_middleware or 'ihs' in detected_middleware -%}
              {%- set modules = modules + ['web'] -%}
            {%- endif -%}
            {%- if 'oracle' in detected_middleware -%}
              {%- set modules = modules + ['database'] -%}
            {%- endif -%}
            {%- if 'tsm' in detected_middleware -%}
              {%- set modules = modules + ['backup'] -%}
            {%- endif -%}
          {%- else -%}
            {%- set modules = [toolbox_module] -%}
          {%- endif -%}
          {{ modules }}

    - name: Display selected modules
      debug:
        msg: "Selected modules: {{ selected_modules }}"

  tasks:
    - name: Execute Operating module
      include_tasks: playbooks/operating.yml
      when: "'operating' in selected_modules"
      tags:
        - operating

    - name: Execute Web module  
      include_tasks: playbooks/web.yml
      when: "'web' in selected_modules"
      tags:
        - web

    - name: Execute Database module
      include_tasks: playbooks/database.yml
      when: "'database' in selected_modules"
      tags:
        - database

    - name: Execute Backup module
      include_tasks: playbooks/backup.yml
      when: "'backup' in selected_modules"
      tags:
        - backup

  post_tasks:
    - name: Display execution summary
      debug:
        msg:
          - "=========================================="
          - "Execution completed successfully"
          - "Host: {{ inventory_hostname }}"
          - "Modules executed: {{ selected_modules }}"
          - "Middleware detected: {{ detected_middleware }}"
          - "Environment: {{ env }}"
          - "=========================================="

  rescue:
    - name: Global error handler
      debug:
        msg:
          - "GLOBAL ERROR in the workflow"
          - "Host: {{ inventory_hostname }}"
          - "Task: {{ ansible_failed_task.name | default('Unknown') }}"
          - "Error: {{ ansible_failed_result.msg | default('Unknown error') }}"

    - name: Trigger rollback if configured
      debug:
        msg: "Automatic rollback enabled"
      when: rollback_on_failure | default(true) | bool
