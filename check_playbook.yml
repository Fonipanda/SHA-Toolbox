# check_playbook.yml  
# Playbook de vérifications et compliance pour les environnements SHA
---
- name: "SHA Application Environment - Vérifications et Compliance"
  hosts: "{{ hostname | default('all') }}"
  gather_facts: true
  become: true
  serial: 1
  
  vars:
    check_timestamp: "{{ ansible_date_time.iso8601 }}"
    check_id: "{{ ansible_date_time.epoch }}"
    check_report_dir: "/tmp/ansible_checks"
    
  pre_tasks:
    - name: "Création du répertoire de rapports de vérification"
      ansible.builtin.file:
        path: "{{ check_report_dir }}"
        state: directory
        mode: '0755'
        
    - name: "Initialisation du rapport de vérification"
      ansible.builtin.set_fact:
        compliance_report:
          check_id: "{{ check_id }}"
          hostname: "{{ ansible_hostname }}"
          check_timestamp: "{{ check_timestamp }}"
          checks_performed: []
          compliance_status: {}
          violations: []
          warnings: []
          recommendations: []

  tasks:
    # Vérifications de base du système
    - name: "Vérification 1 - Conformité du système de base"
      block:
        - name: "Vérification de l'existence du volume groupe vg_apps"
          ansible.builtin.shell: |
            {% if ansible_os_family == "AIX" %}
            lsvg vg_apps && echo "vg_apps_exists=true" || echo "vg_apps_exists=false"
            {% elif ansible_os_family == "RedHat" %}
            vgs vg_apps && echo "vg_apps_exists=true" || echo "vg_apps_exists=false"
            {% endif %}
          register: vg_apps_status
          changed_when: false
          failed_when: false
          when: ansible_os_family != "Windows"
          
        - name: "Vérification de l'arborescence /apps"
          ansible.builtin.stat:
            path: "/apps"
          register: apps_dir_check
          when: ansible_os_family != "Windows"
          
        - name: "Vérification de l'arborescence /applis"
          ansible.builtin.stat:
            path: "/applis"
          register: applis_dir_check
          when: ansible_os_family != "Windows"
          
        - name: "Vérification de la Toolbox"
          ansible.builtin.stat:
            path: "/apps/toolboxes"
          register: toolbox_check
          when: ansible_os_family != "Windows"
          
        - name: "Enregistrement des résultats - Vérifications de base"
          ansible.builtin.set_fact:
            compliance_report: "{{ compliance_report | combine({
              'checks_performed': compliance_report.checks_performed + ['system_base_compliance'],
              'compliance_status': compliance_report.compliance_status | combine({
                'vg_apps_exists': vg_apps_status.stdout is defined and 'vg_apps_exists=true' in vg_apps_status.stdout,
                'apps_directory': apps_dir_check.stat.exists | default(false),
                'applis_directory': applis_dir_check.stat.exists | default(false),
                'toolbox_installed': toolbox_check.stat.exists | default(false)
              })
            }) }}"
      tags: [system_base]

    # Vérifications des middlewares installés
    - name: "Vérification 2 - Détection et état des middlewares"
      block:
        - name: "Détection des middlewares installés"
          ansible.builtin.include_role:
            name: app_environment_builder
            tasks_from: detect_middleware
            
        - name: "Vérification des processus WebSphere"
          ansible.builtin.shell: |
            ps -ef | grep -E "(dmgr|nodeagent|server1)" | grep -v grep || echo "no_was_processes"
          register: was_processes
          changed_when: false
          failed_when: false
          when: ansible_os_family != "Windows"
          
        - name: "Vérification des processus Oracle"
          ansible.builtin.shell: |
            ps -ef | grep -E "(ora_pmon|ora_smon)" | grep -v grep || echo "no_oracle_processes"
          register: oracle_processes
          changed_when: false
          failed_when: false
          when: ansible_os_family != "Windows"
          
        - name: "Enregistrement des résultats - Middlewares"
          ansible.builtin.set_fact:
            compliance_report: "{{ compliance_report | combine({
              'checks_performed': compliance_report.checks_performed + ['middleware_detection'],
              'compliance_status': compliance_report.compliance_status | combine({
                'detected_middleware_count': detected_middleware_list | length | default(0),
                'websphere_active': was_processes.stdout is defined and 'no_was_processes' not in was_processes.stdout,
                'oracle_active': oracle_processes.stdout is defined and 'no_oracle_processes' not in oracle_processes.stdout,
                'middleware_list': detected_middleware_list | default([])
              })
            }) }}"
      tags: [middleware]

    # Vérifications de conformité BP21
    - name: "Vérification 3 - Conformité aux règles BP21"
      block:
        - name: "Vérification des interdictions sur rootvg"
          ansible.builtin.shell: |
            df -h | grep rootvg | grep -E "(appli|app_data|middleware)" || echo "rootvg_compliance_ok"
          register: rootvg_compliance
          changed_when: false
          failed_when: false
          when: ansible_os_family != "Windows"
          
        - name: "Vérification des permissions sur /applis"
          ansible.builtin.shell: |
            find /applis -maxdepth 2 -type d -exec ls -ld {} \; 2>/dev/null | head -10
          register: applis_permissions
          changed_when: false
          failed_when: false
          when: ansible_os_family != "Windows"
          
        - name: "Vérification de la nomenclature des répertoires"
          ansible.builtin.shell: |
            ls -1 /applis/ 2>/dev/null | grep -E "^[0-9]{5}-[A-Za-z0-9]{5}$" || echo "no_compliant_directories"
          register: directory_naming
          changed_when: false
          failed_when: false
          when: ansible_os_family != "Windows"
          
        - name: "Enregistrement des résultats - Conformité BP21"
          ansible.builtin.set_fact:
            compliance_report: "{{ compliance_report | combine({
              'checks_performed': compliance_report.checks_performed + ['bp21_compliance'],
              'compliance_status': compliance_report.compliance_status | combine({
                'rootvg_compliance': rootvg_compliance.stdout is defined and 'rootvg_compliance_ok' in rootvg_compliance.stdout,
                'applis_permissions_ok': applis_permissions.rc == 0,
                'directory_naming_compliant': directory_naming.stdout is defined and 'no_compliant_directories' not in directory_naming.stdout
              })
            }) }}"
      tags: [bp21]

    # Vérifications de sécurité
    - name: "Vérification 4 - Conformité sécurité"
      block:
        - name: "Vérification d'Illumio VEN"
          ansible.builtin.shell: |
            systemctl status illumio-ven 2>/dev/null || service illumio-ven status 2>/dev/null || echo "illumio_not_found"
          register: illumio_status
          changed_when: false
          failed_when: false
          when: ansible_os_family != "Windows"
          
        - name: "Vérification des scripts dans /etc/local"
          ansible.builtin.shell: |
            ls -la /etc/local/ 2>/dev/null | wc -l
          register: etc_local_scripts
          changed_when: false
          failed_when: false
          when: ansible_os_family != "Windows"
          
        - name: "Vérification des utilisateurs middleware"
          ansible.builtin.shell: |
            getent passwd | grep -E "(was|oracle|mqm|cft)" | wc -l
          register: middleware_users_count
          changed_when: false
          failed_when: false
          when: ansible_os_family != "Windows"
          
        - name: "Enregistrement des résultats - Sécurité"
          ansible.builtin.set_fact:
            compliance_report: "{{ compliance_report | combine({
              'checks_performed': compliance_report.checks_performed + ['security_compliance'],
              'compliance_status': compliance_report.compliance_status | combine({
                'illumio_active': illumio_status.rc == 0 if illumio_status.rc is defined else false,
                'etc_local_scripts_count': etc_local_scripts.stdout | int | default(0),
                'middleware_users_count': middleware_users_count.stdout | int | default(0)
              })
            }) }}"
      tags: [security]

    # Vérifications de sauvegarde
    - name: "Vérification 5 - Configuration des sauvegardes"
      block:
        - name: "Vérification du client TSM"
          ansible.builtin.shell: |
            find /opt/tivoli/tsm/client -name "dsmc" 2>/dev/null || find /usr/tivoli/tsm/client -name "dsmc" 2>/dev/null || echo "tsm_not_found"
          register: tsm_client
          changed_when: false
          failed_when: false
          when: ansible_os_family != "Windows"
          
        - name: "Vérification de la configuration TSM"
          ansible.builtin.shell: |
            find /opt/tivoli/tsm/client -name "dsm.sys" 2>/dev/null || find /usr/tivoli/tsm/client -name "dsm.sys" 2>/dev/null || echo "dsm_sys_not_found"
          register: tsm_config
          changed_when: false
          failed_when: false
          when: ansible_os_family != "Windows"
          
        - name: "Enregistrement des résultats - Sauvegarde"
          ansible.builtin.set_fact:
            compliance_report: "{{ compliance_report | combine({
              'checks_performed': compliance_report.checks_performed + ['backup_compliance'],
              'compliance_status': compliance_report.compliance_status | combine({
                'tsm_client_installed': tsm_client.stdout is defined and 'tsm_not_found' not in tsm_client.stdout,
                'tsm_configured': tsm_config.stdout is defined and 'dsm_sys_not_found' not in tsm_config.stdout
              })
            }) }}"
      tags: [backup]

    # Analyse des résultats et génération des recommandations
    - name: "Analyse finale et génération des recommandations"
      block:
        - name: "Calcul du score de conformité"
          ansible.builtin.set_fact:
            total_checks: "{{ compliance_report.checks_performed | length }}"
            passed_checks: "{{ compliance_report.compliance_status.values() | select('equalto', true) | list | length }}"
            compliance_percentage: "{{ ((passed_checks | int) * 100 / (total_checks | int)) | round(2) if total_checks | int > 0 else 0 }}"
            
        - name: "Génération des violations"
          ansible.builtin.set_fact:
            violations_list: []
            warnings_list: []
            
        - name: "Ajout des violations critiques"
          ansible.builtin.set_fact:
            violations_list: "{{ violations_list + ['Volume groupe vg_apps non trouvé - SHA non conforme'] }}"
          when: not compliance_report.compliance_status.vg_apps_exists | default(true)
          
        - name: "Ajout des violations BP21"
          ansible.builtin.set_fact:
            violations_list: "{{ violations_list + ['Non-conformité BP21: données métier détectées sur rootvg'] }}"
          when: not compliance_report.compliance_status.rootvg_compliance | default(true)
          
        - name: "Ajout des avertissements"
          ansible.builtin.set_fact:
            warnings_list: "{{ warnings_list + ['Aucun middleware détecté - vérifier l\\'installation'] }}"
          when: compliance_report.compliance_status.detected_middleware_count | default(0) == 0
          
        - name: "Mise à jour finale du rapport"
          ansible.builtin.set_fact:
            compliance_report: "{{ compliance_report | combine({
              'violations': violations_list,
              'warnings': warnings_list,
              'compliance_score': compliance_percentage,
              'total_checks': total_checks,
              'passed_checks': passed_checks,
              'overall_status': 'COMPLIANT' if compliance_percentage | float >= 80 else 'NON_COMPLIANT'
            }) }}"

  post_tasks:
    - name: "Génération du rapport de conformité JSON"
      ansible.builtin.template:
        src: "compliance_report.json.j2"
        dest: "{{ check_report_dir }}/compliance_report_{{ check_id }}.json"
        mode: '0644'
      
    - name: "Affichage du résumé de conformité"
      ansible.builtin.debug:
        msg: |
          =========================================================
          RAPPORT DE CONFORMITÉ SHA
          =========================================================
          Serveur: {{ ansible_hostname }}
          Date: {{ check_timestamp }}
          
          SCORE DE CONFORMITÉ: {{ compliance_percentage }}% ({{ passed_checks }}/{{ total_checks }})
          STATUT GLOBAL: {{ compliance_report.overall_status }}
          
          VIOLATIONS CRITIQUES ({{ violations_list | length }}):
          {% for violation in violations_list %}
          - {{ violation }}
          {% endfor %}
          
          AVERTISSEMENTS ({{ warnings_list | length }}):
          {% for warning in warnings_list %}
          - {{ warning }}
          {% endfor %}
          
          MIDDLEWARES DÉTECTÉS: {{ compliance_report.compliance_status.middleware_list | default([]) | join(', ') if compliance_report.compliance_status.middleware_list | default([]) else 'Aucun' }}
          
          Rapport détaillé: {{ check_report_dir }}/compliance_report_{{ check_id }}.json
          =========================================================
        
    - name: "Échec si conformité insuffisante"
      ansible.builtin.fail:
        msg: "Score de conformité insuffisant ({{ compliance_percentage }}% < 80%). Consulter le rapport pour les détails."
      when: compliance_percentage | float < 80 and strict_compliance | default(false)